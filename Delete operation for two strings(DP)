C++ code




https://leetcode.com/problems/delete-operation-for-two-strings/description/




//Memoization


class Solution {
    int func(int i, int j, string& word1, string& word2,vector<vector<int>>& dp){
        if(i<0 || j<0){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int one = 0 , two = 0;
        if(word1[i]==word2[j]){
            one = 1 + func(i-1,j-1,word1,word2,dp);
        }
        two = max(func(i-1,j,word1,word2,dp),func(i,j-1,word1,word2,dp));
        return dp[i][j] = max(one,two);
    }
public:
    int minDistance(string word1, string word2) {
        vector<vector<int>> dp(word1.length()+1,vector<int>(word2.length()+1,-1));
        int k = func(word1.length()-1,word2.length()-1,word1,word2,dp);
        int ans = (word1.length()-k) + (word2.length()-k);
        return ans;
    }
};



//Tabulation


class Solution {
public:
    int minDistance(string word1, string word2) {
        vector<vector<int>> dp(word1.length()+1,vector<int>(word2.length()+1,0));
        for(int i=0;i<=word1.length();i++){
            for(int j=0;j<=word2.length();j++){
                int one = 0,two=0;
                if(i==0 && j==0){
                    if(word1[i]==word2[j])
                    dp[i][j] = 1;
                }
                else{
                    if(word1[i]==word2[j]){
                        one = 1;
                    }
                    if(i == 0){
                        two = max(0,dp[i][j-1]);
                    }
                    else if(j==0){
                        two = max(0,dp[i-1][j]);
                    }
                    else{
                        two = max(dp[i-1][j],dp[i][j-1]);
                        one += dp[i-1][j-1];
                    }
                    dp[i][j] = max(one,two);
                }
            }
        }
        int k = dp[word1.length()-1][word2.length()-1];
        int ans = (word1.length()-k) + (word2.length()-k);
        return ans;
    }
};

