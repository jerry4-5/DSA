C++ code



https://leetcode.com/problems/house-robber-iii/description/



//Memoization



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int func(TreeNode* node, unordered_map<TreeNode*,int>& dp){
        if(node == NULL){
            return 0;
        }
        if(dp.count(node)){
            return dp[node];
        }
        int one =0,two=0;
        one += node->val;
        if(node->left){
            one += func(node->left->left,dp)+func(node->left->right,dp);
        }
        if(node->right){
            one += func(node->right->right,dp)+func(node->right->left,dp);
        }
        two = func(node->left,dp)+func(node->right,dp);
        return dp[node]=max(one,two);
    }
public:
    int rob(TreeNode* root) {
        unordered_map<TreeNode*,int>dp;
        int max = func(root,dp);
        return max;
    }
};
