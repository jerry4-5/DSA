C++ code




https://leetcode.com/problems/unique-paths-ii/description/



//Memoixation


class Solution {
    int func(int i, int j, vector<vector<int>>& obstacleGrid, vector<vector<int>>& dp){
        if(i == 0 && j==0 && obstacleGrid[i][j]!=1){
            return 1;
        }
        if(i<0 || j<0){
            return 0;
        }
        if(obstacleGrid[i][j]== 1){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        int one = 0, two =0;
        one = func(i-1,j,obstacleGrid,dp);
        two = func(i,j-1,obstacleGrid,dp);

        return dp[i][j]=one+two;
    }
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size(),n = obstacleGrid[0].size();
         vector<vector<int>> dp(m+1,vector<int>(n+1,-1));
        return func(m-1,n-1,obstacleGrid,dp);
    }
};



//Tabulation



class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size(),n = obstacleGrid[0].size();
        vector<vector<int>> dp(m+1,vector<int>(n+1,0));
        if(obstacleGrid[m-1][n-1]==1){
            return 0;
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 && j==0 && obstacleGrid[i][j]!=1){
                    dp[i][j]=1;
                }
                else if(obstacleGrid[i][j]==1){
                    dp[i][j] =0;
                }
                else if(i==0){
                    dp[i][j] = dp[i][j-1];
                }
                else if(j==0){
                    dp[i][j] = dp[i-1][j];
                }
                else{
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
                }
            }
        }
        return dp[m-1][n-1];
    }
};
