C++ implementation


https://leetcode.com/problems/possible-bipartition/


class Solution {
   bool dfs(int i, vector<int> adj[], vector<int>& vis, vector<int>& color, int c){
       vis[i]=1;
       color[i]=c;
       for(auto it: adj[i]){
           if(!vis[it]){
               if(!dfs(it,adj,vis,color,!c)){
                   return 0;
               }
           }
           else if(vis[it] && color[it]==c){
               return 0;
           }
       }
       return 1;
   }
public:
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {
        vector<int> adj[n+1];
        vector<int>vis(n+1,0);
        for(int i=0;i<dislikes.size();i++){
            adj[dislikes[i][0]].push_back(dislikes[i][1]);
            adj[dislikes[i][1]].push_back(dislikes[i][0]);
        }
        vector<int>color(n+1,-1);
        int c=0;
        for(int i=1;i<=n;i++){
            if(!vis[i]){
                if(dfs(i,adj,vis,color,c)){
                    bool flag = 1;
                    for(int i=1;i<=n;i++){
                        if(vis[i]!=1){
                            flag =0;
                            break;
                        }
                    }
                    if(flag == 1)
                    return 1;
                }
            }
        }
        return 0;
    }
};
