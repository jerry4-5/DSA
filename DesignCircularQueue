C++ code


https://leetcode.com/problems/design-circular-queue/






class MyCircularQueue {
public:
    int size;
    vector<int> arr;
    int front;
    int rear;
    MyCircularQueue(int k) {
        size = k;
        arr.resize(size);
        front = -1;
        rear = -1;
    }
    
    bool enQueue(int value) {
        if(front ==  -1){
            front = rear = 0;
            arr[rear%size] = value;
            return 1;
        }
        else if(isFull()){
            return 0;
        }
        else{
            rear++;
            arr[rear%size] = value;
            return 1;
        }
    }
    
    bool deQueue() {
       if(isEmpty()){
              return 0;
          }
        else{
            front++;
            return 1;
            
        }
    }
    
    int Front() {
       if(isEmpty()){
              return -1;
          }
        return arr[front%size];
    }
    
    int Rear() {
          if(isEmpty()){
              return -1;
          }
        return arr[rear%size];
    }
    
    bool isEmpty() {
        if(front == -1 || rear<front){
            return 1;
        }
        else{
            return 0;
        }
    }
    
    bool isFull() {
        if(rear-front == ( size-1 ) ){
            return 1;
        }
        else{
            return 0;
        }
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
