C++ code



https://leetcode.com/problems/unique-paths/description/




//Memoization


class Solution {
    int paths(int i, int j, vector<vector<int>>& dp){
        if(i==0 && j==0){
            return 1;
        }
        if(i<0 || j<0){
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        int one =0,two =0;
        one = paths(i-1,j,dp);
        two = paths(i,j-1,dp);
        return dp[i][j]=one+two;
    }
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m+1,vector<int>(n+1,-1));
        return paths(m-1,n-1,dp);
    }
};



//Tabulation


class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m+1,vector<int>(n+1,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(i==0 && j==0){
                    dp[i][j]=1;
                }
                else if(j==0){
                    dp[i][j] = dp[i-1][j];
                }
                else if(i==0){
                    dp[i][j] = dp[i][j-1];
                }
                else{
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
                }
            }
        }
        return dp[m-1][n-1];
    }
};
